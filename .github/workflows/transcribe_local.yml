name: Transcribe Local Audio (whisper.cpp + PR, auto-delete audio)

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      model:
        description: "Whisper model (base.en, small.en, medium.en)"
        required: true
        default: "small.en"
      source_name:
        description: "Label to record as 'source' in CSV"
        required: true
        default: "Manual Upload"

jobs:
  transcribe:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ffmpeg wget python3-pip
          pip3 install feedparser python-dateutil

      - name: Build whisper.cpp
        run: |
          git clone https://github.com/ggerganov/whisper.cpp.git
          cd whisper.cpp && make

      - name: Pick model URL
        id: pick_model
        run: |
          MODEL="${{ github.event.inputs.model }}"
          case "$MODEL" in
            base.en)
              echo "url=https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin" >> $GITHUB_OUTPUT
              echo "file=ggml-base.en.bin" >> $GITHUB_OUTPUT
              ;;
            small.en)
              echo "url=https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-small.en.bin" >> $GITHUB_OUTPUT
              echo "file=ggml-small.en.bin" >> $GITHUB_OUTPUT
              ;;
            medium.en)
              echo "url=https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-medium.en.bin" >> $GITHUB_OUTPUT
              echo "file=ggml-medium.en.bin" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unsupported model: $MODEL"; exit 1
              ;;
          esac

      - name: Download model (not committed)
        run: |
          mkdir -p models
          wget -q "${{ steps.pick_model.outputs.url }}" -O "models/${{ steps.pick_model.outputs.file }}"
          ls -lh models/

      - name: Ensure dirs exist
        run: |
          mkdir -p audio data/transcripts

      - name: List uploaded audio
        run: |
          echo "Listing audio/ (upload your files here via GitHub UI):"
          ls -lh audio || true

      - name: Transcribe uploaded audio to TXT + CSV
        env:
          SRC_DEFAULT: ${{ github.event.inputs.source_name }}
          MODEL_FILE: ${{ steps.pick_model.outputs.file }}
        run: |
          python3 - << 'PY'
          import os, csv, subprocess, sys

          SRC_DEFAULT = os.environ.get("SRC_DEFAULT","Manual Upload")
          MODEL_FILE  = os.environ["MODEL_FILE"]

          audio_dir = "audio"
          files = []
          if os.path.isdir(audio_dir):
            for n in sorted(os.listdir(audio_dir)):
              if n.lower().endswith((".mp3",".m4a",".wav")):
                files.append(n)

          if not files:
            print("[ERROR] No audio files found in ./audio/")
            print("Upload an audio file under the 'audio/' folder (e.g. audio/episode.mp3) and run again.")
            sys.exit(5)

          os.makedirs("data/transcripts", exist_ok=True)
          csv_path = "data/transcripts/transcripts.csv"
          rows = []
          if os.path.exists(csv_path):
            with open(csv_path, newline="", encoding="utf-8") as f:
              rows = list(csv.reader(f))
          else:
            rows.append(["source","episode_title","episode_date","episode_link","transcript_path"])

          for name in files:
            in_path = os.path.join(audio_dir, name)
            stem = os.path.splitext(name)[0]
            out_txt = os.path.join("data","transcripts", f"{stem}.txt")

            if os.path.exists(out_txt):
              print(f"[SKIP] Transcript already exists: {out_txt}")
            else:
              print(f"[WHISPER] Transcribing: {in_path}")
              cmd = [
                "./whisper.cpp/main",
                "-m", f"models/{MODEL_FILE}",
                "-f", in_path,
                "-otxt",
                "-of", os.path.join("data","transcripts", stem),
                "-ml", "1"
              ]
              res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
              print(res.stdout)

            # CSV row: date/link unknown for manual uploads; keep blanks
            rows.append([SRC_DEFAULT, stem, "", "", out_txt])

          with open(csv_path, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerows(rows)

          print(f"[DONE] Wrote CSV: {csv_path} ({len(rows)-1} rows total)")
          PY

      - name: Delete uploaded audio after transcription
        run: |
          echo "Removing audio files from repository working tree..."
          git rm -f audio/* || true
          # keep folder
          mkdir -p audio && touch audio/.gitkeep

      - name: Write run stamp (ensures PR exists)
        run: |
          date -u +"%Y-%m-%dT%H:%M:%SZ" > data/transcripts/.last-run

      # Include transcript changes AND the audio deletions in the PR
      - name: Create/Update PR with transcripts (and remove audio)
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bot/transcripts
          add-paths: |
            data/transcripts/**
            audio/**
          commit-message: "Add transcripts and remove uploaded audio"
          title: "Add transcripts and remove uploaded audio"
          body: "Automated transcription of manually uploaded audio. Audio files are removed in this PR."
          labels: automation

      - name: Show PR link
        run: |
          echo "PR URL: ${{ steps.create_pr.outputs['pull-request-url'] }}"
          echo "PR Number: ${{ steps.create_pr.outputs['pull-request-number'] }}"
